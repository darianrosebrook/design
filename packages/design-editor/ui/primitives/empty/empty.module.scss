// Empty component styles
// Migrated from Tailwind to SCSS with design tokens

// Import generated token variables
@use './Empty.tokens.generated.scss' as emptyTokens;

.empty {
  // Include the generated variables mixin within the component scope
  @include emptyTokens.vars;

  // Base empty styles (equivalent to flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12)
  display: var(--empty-container-display); // equivalent to flex
  min-width: var(--empty-container-minWidth); // equivalent to min-w-0
  flex: var(--empty-container-flex); // equivalent to flex-1
  flex-direction: var(--empty-container-flexDirection); // equivalent to flex-col
  align-items: var(--empty-container-alignItems); // equivalent to items-center
  justify-content: var(--empty-container-justifyContent); // equivalent to justify-center
  gap: var(--empty-container-gap); // equivalent to gap-6
  border-radius: var(--empty-container-borderRadius); // equivalent to rounded-lg
  border: var(--empty-container-border-width) var(--empty-container-border-style) var(--empty-container-border-color); // equivalent to border-dashed
  padding: var(--empty-container-padding-default); // equivalent to p-6
  text-align: var(--empty-container-textAlign); // equivalent to text-center
  text-wrap: var(--empty-container-textWrap); // equivalent to text-balance

  @media (min-width: 768px) {
    padding: var(--empty-container-padding-medium); // equivalent to md:p-12
  }
}

.emptyHeader {
  // Header styles (equivalent to flex max-w-sm flex-col items-center gap-2 text-center)
  display: var(--empty-header-display); // equivalent to flex
  max-width: var(--empty-header-maxWidth); // equivalent to max-w-sm
  flex-direction: var(--empty-header-flexDirection); // equivalent to flex-col
  align-items: var(--empty-header-alignItems); // equivalent to items-center
  gap: var(--empty-header-gap); // equivalent to gap-2
  text-align: var(--empty-header-textAlign); // equivalent to text-center
}

.emptyMedia {
  // Base media styles (equivalent to flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0)
  display: var(--empty-media-display); // equivalent to flex
  flex-shrink: var(--empty-media-flexShrink); // equivalent to shrink-0
  align-items: var(--empty-media-alignItems); // equivalent to items-center
  justify-content: var(--empty-media-justifyContent); // equivalent to justify-center
  margin-bottom: var(--empty-media-marginBottom); // equivalent to mb-2

  & svg {
    pointer-events: var(--empty-media-icon-pointerEvents); // equivalent to [&_svg]:pointer-events-none
    flex-shrink: 0; // equivalent to [&_svg]:shrink-0
  }
}

// Media variants
.emptyMedia--variant-default {
  // Default variant (equivalent to bg-transparent)
  background-color: transparent; // equivalent to bg-transparent
}

.emptyMedia--variant-icon {
  // Icon variant (equivalent to bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6)
  background-color: var(--empty-media-variants-icon-backgroundColor); // equivalent to bg-muted
  color: var(--empty-media-variants-icon-color); // equivalent to text-foreground
  display: flex; // equivalent to flex
  width: var(--empty-media-variants-icon-size); // equivalent to size-10
  height: var(--empty-media-variants-icon-size); // equivalent to size-10
  flex-shrink: 0; // equivalent to shrink-0
  align-items: center; // equivalent to items-center
  justify-content: center; // equivalent to justify-center
  border-radius: var(--empty-media-variants-icon-borderRadius); // equivalent to rounded-lg

  & svg:not([class*="size-"]) {
    width: var(--empty-media-variants-icon-iconSize); // equivalent to size-6
    height: var(--empty-media-variants-icon-iconSize);
  }
}

.emptyTitle {
  // Title styles (equivalent to text-lg font-medium tracking-tight)
  font-size: var(--empty-title-fontSize); // equivalent to text-lg
  font-weight: var(--empty-title-fontWeight); // equivalent to font-medium
  letter-spacing: var(--empty-title-letterSpacing); // equivalent to tracking-tight
}

.emptyDescription {
  // Description styles (equivalent to text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4)
  color: var(--empty-description-color); // equivalent to text-muted-foreground
  font-size: var(--empty-description-fontSize); // equivalent to text-sm
  line-height: var(--empty-description-lineHeight); // equivalent to relaxed

  & > a {
    text-decoration: var(--empty-description-link-textDecoration); // equivalent to [&>a]:underline
    text-underline-offset: var(--empty-description-link-textUnderlineOffset); // equivalent to [&>a]:underline-offset-4

    &:hover {
      color: var(--empty-description-link-hover-color); // equivalent to [&>a:hover]:text-primary
    }
  }
}

.emptyContent {
  // Content styles (equivalent to flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance)
  display: var(--empty-content-display); // equivalent to flex
  width: var(--empty-content-width); // equivalent to w-full
  max-width: var(--empty-content-maxWidth); // equivalent to max-w-sm
  min-width: var(--empty-content-minWidth); // equivalent to min-w-0
  flex-direction: var(--empty-content-flexDirection); // equivalent to flex-col
  align-items: var(--empty-content-alignItems); // equivalent to items-center
  gap: var(--empty-content-gap); // equivalent to gap-4
  font-size: var(--empty-content-fontSize); // equivalent to text-sm
  text-wrap: var(--empty-content-textWrap); // equivalent to text-balance
}