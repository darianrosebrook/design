// Switch component styles
// Migrated from Tailwind to SCSS with design tokens

// Import generated token variables
@use './Switch.tokens.generated.scss' as switchTokens;

.switch {
  // Include the generated variables mixin within the component scope
  @include switchTokens.vars;
  // Base switch styles (equivalent to inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none)
  display: inline-flex;
  height: var(--switch-height); // equivalent to h-[1.15rem]
  width: var(--switch-width); // equivalent to w-8
  flex-shrink: 0;
  align-items: center;
  border-radius: var(--switch-borderRadius); // equivalent to rounded-full
  border: var(--switch-border-width) var(--switch-border-style) transparent; // equivalent to border border-transparent
  box-shadow: var(--switch-boxShadow); // equivalent to shadow-xs
  transition: all var(--switch-transition-duration) var(--switch-transition-easing); // equivalent to transition-all
  outline: none; // equivalent to outline-none

  // Peer styles (equivalent to peer)
  // (This is handled by the peer-disabled styles below)

  // Checked state (equivalent to data-[state=checked]:bg-primary)
  &[data-state="checked"] {
    background-color: var(--switch-states-checked-backgroundColor);
  }

  // Unchecked state (equivalent to data-[state=unchecked]:bg-input dark:data-[state=unchecked]:bg-input/80)
  &[data-state="unchecked"] {
    background-color: var(--switch-states-unchecked-backgroundColor);

    .dark & {
      background-color: var(--switch-states-unchecked-dark-backgroundColor);
      opacity: var(--switch-states-unchecked-dark-backgroundColor-opacity);
    }
  }

  // Focus visible styles (equivalent to focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px])
  &:focus-visible {
    border-color: var(--semantic-color-action-border-primary-focus);
    box-shadow: var(--semantic-focus-ring);
  }

  // Disabled state (equivalent to disabled:cursor-not-allowed disabled:opacity-50)
  &:disabled {
    cursor: not-allowed;
    opacity: var(--switch-states-disabled-opacity);
  }
}

.switchThumb {
  // Thumb styles (equivalent to pointer-events-none block size-4 rounded-full ring-0 transition-transform)
  pointer-events: none; // equivalent to pointer-events-none
  display: block; // equivalent to block
  width: var(--switch-thumb-size); // equivalent to size-4
  height: var(--switch-thumb-size); // equivalent to size-4
  border-radius: var(--switch-thumb-borderRadius); // equivalent to rounded-full
  box-shadow: 0 0 0 0 transparent; // equivalent to ring-0
  transition: transform var(--switch-transition-duration) var(--switch-transition-easing); // equivalent to transition-transform

  // Background colors (equivalent to bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground)
  background-color: var(--switch-thumb-backgroundColor-default);

  .dark &[data-state="unchecked"] {
    background-color: var(--switch-thumb-backgroundColor-uncheckedDark);
  }

  .dark &[data-state="checked"] {
    background-color: var(--switch-thumb-backgroundColor-checkedDark);
  }

  // Transform states (equivalent to data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0)
  &[data-state="checked"] {
    transform: var(--switch-thumb-transform-checked);
  }

  &[data-state="unchecked"] {
    transform: var(--switch-thumb-transform-unchecked);
  }
}