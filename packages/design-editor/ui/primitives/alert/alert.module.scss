// Alert component styles
// Migrated from Tailwind to SCSS with design tokens

// Import generated token variables
@use './Alert.tokens.generated.scss' as alertTokens;

.alert {
  // Include the generated variables mixin within the component scope
  @include alertTokens.vars;
  // Base alert styles (equivalent to relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-var(--semantic-opacity-disabled) items-start [&>svg]:size-4 [&>svg]:translate-y-var(--semantic-opacity-disabled) [&>svg]:text-current)
  position: relative;
  width: 100%; // equivalent to w-full
  border-radius: var(--alert-borderRadius); // equivalent to rounded-lg
  border: var(--alert-border-width) var(--alert-border-style) var(--alert-border-color-default);
  padding: var(--alert-padding-vertical) var(--alert-padding-horizontal); // equivalent to px-4 py-3
  font-size: var(--alert-fontSize); // equivalent to text-sm
  display: grid;
  align-items: start;

  // Default grid when no SVG (equivalent to grid-cols-[0_1fr])
  grid-template-columns: 0 1fr;

  // Gap between rows (equivalent to gap-y-var(--semantic-opacity-disabled))
  gap: var(--alert-gap-row); // equivalent to gap-y-var(--semantic-opacity-disabled)

  // Styles when there's an SVG icon (equivalent to has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] has-[>svg]:gap-x-3)
  &:has(> svg) {
    grid-template-columns: var(--alert-icon-size) 1fr; // equivalent to calc(var(--spacing)*4)_1fr (assuming 4px spacing unit)
    column-gap: var(--alert-gap-column); // equivalent to gap-x-3
  }

  // SVG icon styles (equivalent to [&>svg]:size-4 [&>svg]:translate-y-var(--semantic-opacity-disabled) [&>svg]:text-current)
  > svg {
    width: var(--alert-icon-size); // equivalent to size-4
    height: var(--alert-icon-size);
    transform: translateY(var(--alert-icon-translateY)); // equivalent to translate-y-var(--semantic-opacity-disabled)
    color: currentColor; // equivalent to text-current
  }
}

// Variant styles
.alert--variant-default {
  // Default variant (equivalent to bg-card text-card-foreground)
  background-color: var(--alert-variants-default-backgroundColor);
  color: var(--alert-variants-default-color);
}

.alert--variant-destructive {
  // Destructive variant (equivalent to text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90)
  color: var(--alert-variants-destructive-color);
  background-color: var(--alert-variants-destructive-backgroundColor);

  // SVG text color
  > svg {
    color: currentColor;
  }

  // Description text color override (equivalent to *:data-[slot=alert-description]:text-destructive/90)
  :global(*) [data-slot="alert-description"] {
    color: var(--alert-variants-destructive-descriptionColor);
    opacity: var(--alert-variants-destructive-descriptionColor-opacity);
  }
}

.alertTitle {
  // Title styles (equivalent to col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight)
  grid-column-start: 2;
  line-clamp: 1;
  min-height: var(--alert-title-minHeight); // equivalent to min-h-4
  font-weight: var(--alert-title-fontWeight); // equivalent to font-medium
  letter-spacing: var(--alert-title-letterSpacing); // equivalent to tracking-tight

  // Webkit line clamp
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.alertDescription {
  // Description styles (equivalent to text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed)
  color: var(--core-color-display-foreground-secondary);
  grid-column-start: 2;
  display: grid;
  justify-items: start;
  gap: 4px; // equivalent to gap-1
  font-size: var(--alert-description-fontSize); // equivalent to text-sm

  // Paragraph line height (equivalent to [&_p]:leading-relaxed)
  p {
    line-height: var(--alert-description-lineHeight); // equivalent to leading-relaxed
  }
}