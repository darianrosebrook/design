// Input component styles
// Migrated from Tailwind to SCSS with semantic design tokens

// Import generated token variables
@use './Input.tokens.generated.scss' as inputTokens;

.input {
  // Include the generated variables mixin within the component scope
  @include inputTokens.vars;
  // File input text color (equivalent to file:text-foreground)
  &[type="file"] {
    color: var(--semantic-color-display-foreground-primary);
  }

  // Placeholder text color (equivalent to placeholder:text-muted-foreground)
  &::placeholder {
    color: var(--input-placeholderColor);
  }

  // Selection colors (equivalent to selection:bg-primary selection:text-primary-foreground)
  &::selection {
    background-color: var(--input-selection-backgroundColor);
    color: var(--input-selection-color);
  }

  // Dark mode background (equivalent to dark:bg-input/30)
  .dark & {
    background-color: rgba(var(--input-backgroundColor-dark), var(--input-backgroundColor-dark-opacity));
  }

  // Base input styles (equivalent to border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none)
  color: inherit;
  border: var(--input-border-width) solid var(--input-border-color-default);
  height: var(--input-height);
  width: 100%;
  min-width: 0;
  border-radius: var(--input-borderRadius);
  background-color: var(--input-backgroundColor-default);
  padding: var(--input-padding-vertical) var(--input-padding-horizontal);
  font-size: var(--input-fontSize-base);
  box-shadow: var(--semantic-elevation-default);
  transition: var(--semantic-motion-interaction-focus-duration) var(--semantic-motion-interaction-focus-easing);
  outline: none;

  // File input specific styles (equivalent to file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium)
  &[type="file"] {
    display: inline-flex;
    align-items: center;
    height: calc(var(--semantic-components-input-height-small) - var(--semantic-shape-border-width-hairline));
    border: 0;
    background-color: transparent;
    font-size: var(--semantic-typography-input-02);
    font-weight: var(--semantic-typography-font-weight-medium);
  }

  // Disabled state (equivalent to disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50)
  &:disabled {
    pointer-events: none;
    cursor: not-allowed;
    opacity: var(--semantic-opacity-disabled);
  }

  // Medium screen text size (equivalent to md:text-sm)
  @media (min-width: var(--semantic-dimension-breakpoint-md)) {
    font-size: var(--semantic-typography-input-02);
  }

  // Focus visible styles (equivalent to focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px])
  &:focus-visible {
    border-color: var(--input-border-color-focus);
    box-shadow: 0 0 0 var(--input-focus-ring-width) rgba(var(--input-focus-ring-color), var(--input-focus-ring-color-opacity));
  }

  // Invalid state (equivalent to aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive)
  &[aria-invalid="true"] {
    box-shadow: 0 0 0 var(--input-focus-ring-width) rgba(var(--input-border-color-invalid), 0.2);
    border-color: var(--input-border-color-invalid);

    .dark & {
      box-shadow: 0 0 0 var(--input-focus-ring-width) rgba(var(--input-border-color-invalid), 0.4);
    }
  }
}
