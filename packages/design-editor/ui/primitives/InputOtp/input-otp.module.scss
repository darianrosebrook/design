// InputOtp primitive component styles
// Migrated from Tailwind to SCSS with design tokens

// Import generated token variables
@use './Input-otp.tokens.generated.scss' as inputOtpTokens;

// Include the generated variables mixin

// OTP input container
.input-otp-container {
  // Include the generated variables mixin within the component scope
  @include inputOtpTokens.vars;

  display: var(--input-otp-container-display);
  align-items: var(--input-otp-container-alignItems);
  gap: var(--input-otp-container-gap);

  &.input-otp-container--disabled {
    opacity: var(--input-otp-container-disabled-opacity);
  }
}

// OTP input element
.input-otp {
  &.input-otp--disabled {
    cursor: var(--input-otp-input-cursor-disabled);
  }
}

// OTP input group
.input-otp-group {
  display: var(--input-otp-group-display);
  align-items: var(--input-otp-group-alignItems);
}

// OTP input slot
.input-otp-slot {
  display: var(--input-otp-slot-display);
  align-items: var(--input-otp-slot-alignItems);
  justify-content: var(--input-otp-slot-justifyContent);
  position: var(--input-otp-slot-position);
  width: var(--input-otp-slot-width);
  height: var(--input-otp-slot-height);
  font-size: var(--input-otp-slot-fontSize);
  border: var(--input-otp-slot-border-width) var(--input-otp-slot-border-style) var(--input-otp-slot-border-color);
  box-shadow: var(--input-otp-slot-boxShadow);
  transition: var(--input-otp-slot-transition) var(--input-otp-slot-transitionDuration) var(--input-otp-slot-transitionEasing);
  outline: var(--input-otp-slot-outline);

  // First slot
  &:first-child {
    border-radius: var(--input-otp-slot-border-radius-first);
    border-left-width: var(--input-otp-slot-border-width);
  }

  // Last slot
  &:last-child {
    border-radius: var(--input-otp-slot-border-radius-last);
  }

  // Middle slots
  &:not(:first-child):not(:last-child) {
    border-left-width: 0;
    border-radius: 0;
  }

  // Active state
  &[data-active="true"] {
    border-color: var(--input-otp-slot-states-active-borderColor);
    box-shadow: var(--input-otp-slot-states-active-boxShadow);
    z-index: var(--input-otp-slot-zIndex-active);

    // Invalid active state
    &[aria-invalid="true"] {
      box-shadow: var(--input-otp-slot-states-active-invalid-boxShadow);
      border-color: var(--input-otp-slot-states-active-invalid-borderColor);

      // Dark mode
      .dark & {
        box-shadow: var(--input-otp-slot-states-active-invalid-dark-boxShadow);
      }
    }
  }

  // Invalid state (not active)
  &[aria-invalid="true"] {
    border-color: var(--input-otp-slot-states-invalid-borderColor);
  }
}

// OTP caret (blinking cursor)
.input-otp-caret {
  position: var(--input-otp-caret-position);
  inset: var(--input-otp-caret-inset);
  display: var(--input-otp-caret-display);
  align-items: var(--input-otp-caret-alignItems);
  justify-content: var(--input-otp-caret-justifyContent);
  pointer-events: var(--input-otp-caret-pointerEvents);

  .input-otp-caret-line {
    background-color: var(--input-otp-caret-backgroundColor);
    width: var(--input-otp-caret-width);
    height: var(--input-otp-caret-height);
    animation: var(--input-otp-caret-animation-name) var(--input-otp-caret-animation-duration) infinite;
  }
}

// Caret blink animation
@keyframes caret-blink {
  0%, 50% {
    opacity: 1;
  }
  51%, 100% {
    opacity: 0;
  }
}
