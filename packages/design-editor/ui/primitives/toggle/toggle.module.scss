// Toggle component styles
// Migrated from Tailwind to SCSS with semantic design tokens

// Import generated token variables
@use './Toggle.tokens.generated.scss' as toggleTokens;

// Base toggle styles (equivalent to Tailwind base classes)
.toggle {
  // Include the generated variables mixin within the component scope
  @include toggleTokens.vars;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--semantic-spacing-gap-grid-small); // 8px
  white-space: nowrap;
  border-radius: var(--toggle-borderRadius);
  font-size: var(--toggle-fontSize);
  font-weight: var(--toggle-fontWeight);
  line-height: var(--toggle-lineHeight);
  transition: var(--semantic-motion-interaction-hover-duration) var(--semantic-motion-interaction-hover-easing);
  border: 1px solid transparent;
  cursor: pointer;
  user-select: none;

  // SVG icon styles
  svg {
    pointer-events: none;
    width: var(--semantic-components-action-gap-icon); // 8px * 2
    height: var(--semantic-components-action-gap-icon); // 8px * 2
    flex-shrink: 0;

    &:not([class*="size-"]) {
      width: var(--semantic-components-action-gap-icon); // 8px * 2
      height: var(--semantic-components-action-gap-icon); // 8px * 2
    }
  }

  // Disabled state
  &:disabled {
    pointer-events: none;
    opacity: var(--semantic-opacity-disabled);
  }

  // Focus visible styles
  &:focus-visible {
    outline: none;
    border-color: var(--semantic-color-action-border-primary-focus);
    box-shadow: 0 0 0 3px rgba(var(--semantic-color-action-border-primary-focus), 0.5);
  }

  // Data attributes for state management
  &[data-state="on"] {
    background-color: var(--semantic-color-action-background-primary-default);
    color: var(--semantic-color-action-foreground-primary-default);

    &:hover {
      background-color: var(--semantic-color-action-background-primary-hover);
    }
  }

  &[data-state="off"] {
    background-color: transparent;
    color: var(--semantic-color-action-foreground-secondary-default);

    &:hover {
      background-color: var(--semantic-color-action-background-secondary-hover);
    }
  }
}

// Size variants
.toggle--size-default {
  height: var(--toggle-height-default);
  padding: var(--toggle-padding-vertical-default) var(--toggle-padding-horizontal-default);

  // Adjust padding when there's an SVG
  &:has(> svg) {
    padding-left: var(--semantic-components-action-padding-horizontal-small);
    padding-right: var(--semantic-components-action-padding-horizontal-small);
  }
}

.toggle--size-sm {
  height: var(--toggle-height-sm);
  border-radius: var(--toggle-borderRadius);
  gap: var(--semantic-components-action-gap-composite);
  padding: var(--toggle-padding-vertical-sm) var(--toggle-padding-horizontal-sm);

  // Adjust padding when there's an SVG
  &:has(> svg) {
    padding-left: calc(var(--semantic-components-action-padding-horizontal-small) - var(--semantic-spacing-gap-grid-small));
    padding-right: calc(var(--semantic-components-action-padding-horizontal-small) - var(--semantic-spacing-gap-grid-small));
  }
}

.toggle--size-lg {
  height: var(--toggle-height-lg);
  border-radius: var(--toggle-borderRadius);
  padding: var(--toggle-padding-vertical-lg) var(--toggle-padding-horizontal-lg);

  // Adjust padding when there's an SVG
  &:has(> svg) {
    padding-left: var(--semantic-components-action-padding-horizontal-default);
    padding-right: var(--semantic-components-action-padding-horizontal-default);
  }
}

// Variant styles
.toggle--variant-default {
  background-color: var(--toggle-variants-default-backgroundColor);
  color: var(--toggle-variants-default-color);
  border-color: var(--toggle-variants-default-borderColor);

  &:hover {
    background-color: var(--toggle-variants-default-hover-backgroundColor);
  }

  &:active,
  &[data-state="on"] {
    background-color: var(--toggle-variants-default-pressed-backgroundColor);
  }
}

.toggle--variant-outline {
  background-color: var(--toggle-variants-outline-backgroundColor);
  border-color: var(--toggle-variants-outline-borderColor);
  color: var(--toggle-variants-outline-color);

  &:hover {
    background-color: var(--toggle-variants-outline-hover-backgroundColor);
  }

  &[data-state="on"] {
    background-color: var(--semantic-color-action-background-primary-default);
    color: var(--semantic-color-action-foreground-primary-default);
    border-color: var(--semantic-color-action-border-primary-default);
  }

  .dark & {
    background-color: var(--semantic-color-action-background-secondary-default);
    border-color: var(--semantic-color-action-border-secondary-default);

    &:hover {
      background-color: var(--semantic-color-action-background-secondary-hover);
    }
  }
}

.toggle--variant-secondary {
  background-color: var(--toggle-variants-secondary-backgroundColor);
  color: var(--toggle-variants-secondary-color);

  &:hover {
    background-color: var(--toggle-variants-secondary-hover-backgroundColor);
  }

  &[data-state="on"] {
    background-color: var(--semantic-color-action-background-primary-default);
    color: var(--semantic-color-action-foreground-primary-default);
  }
}

.toggle--variant-ghost {
  background-color: var(--toggle-variants-ghost-backgroundColor);
  color: var(--toggle-variants-ghost-color);

  &:hover {
    background-color: var(--toggle-variants-ghost-hover-backgroundColor);
  }

  &[data-state="on"] {
    background-color: var(--semantic-color-action-background-primary-default);
    color: var(--semantic-color-action-foreground-primary-default);
  }
}
