// ComponentLibrary composer component styles
// Direct CSS equivalents of original Tailwind classes

.componentLibrary {
  // Main container styles - equivalent to bg-background h-full flex flex-col
  background-color: #27272a; // zinc-800 (background)
  height: 100%;
  display: flex;
  flex-direction: column;
}

// Header Section
.componentLibraryHeader {
  // Header container styles - equivalent to flex items-center justify-between h-12 px-3 py-2 border-b border-border flex-shrink-0
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 48px;
  padding: 8px 12px;
  border-bottom: 1px solid #3f3f46; // zinc-700 (border)
  flex-shrink: 0;
}

.componentLibraryHeaderTitle {
  // Header title styles - equivalent to text-sm font-semibold text-foreground
  font-size: 14px;
  font-weight: 600;
  color: #f4f4f5; // zinc-100 (foreground primary)
}

.componentLibraryHeaderCount {
  // Header count styles - equivalent to text-xs font-medium text-muted-foreground
  font-size: 12px;
  font-weight: 500;
  color: #a1a1aa; // zinc-400 (muted-foreground)
}

// Content Section
.componentLibraryContent {
  // Scrollable content container
  flex: 1;
  padding: var(--componentLibrary-spacing-container);
}

// Category Section
.componentLibraryCategory {
  // Category container styles
  display: flex;
  flex-direction: column;
  gap: var(--componentLibrary-spacing-section);
  margin-bottom: var(--componentLibrary-spacing-section);
}

.componentLibraryCategory:last-child {
  margin-bottom: 0;
}

.componentLibraryCategoryHeader {
  // Category header styles - equivalent to text-xs font-medium text-muted-foreground uppercase tracking-wider
  font-size: 12px;
  font-weight: 500;
  color: #a1a1aa; // zinc-400 (muted-foreground)
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

// Component Grid
.componentLibraryGrid {
  // Component grid container
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--componentLibrary-spacing-item);
}

// Component Item
.componentLibraryItem {
  // Individual component item styles
  display: flex;
  align-items: center;
  gap: var(--componentLibrary-layout-component-gap);
  padding: var(--componentLibrary-layout-component-padding);
  min-height: var(--componentLibrary-layout-component-minHeight);
  border-radius: var(--componentLibrary-interactive-borderRadius);
  border: none;
  background: none;
  cursor: pointer;
  text-align: left;
  transition: background-color 150ms ease-in-out;
  position: relative;

  &:hover {
    background-color: #3f3f46; // zinc-700 (hover background)
  }

  &:focus-visible {
    outline: 2px solid #3b82f6; // blue-500 (focus ring)
    outline-offset: 2px;
  }

  &:active {
    transform: translateY(1px);
  }
}

.componentLibraryItemIcon {
  // Component icon styles - equivalent to h-5 w-5 flex-shrink-0 text-muted-foreground hover:text-foreground
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  color: #a1a1aa; // zinc-400 (muted-foreground)

  .componentLibraryItem:hover & {
    color: #f4f4f5; // zinc-100 (foreground)
  }
}

.componentLibraryItemContent {
  // Component content container
  flex: 1;
  min-width: 0;
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-grid-xsmall);
}

.componentLibraryItemName {
  // Component name styles - equivalent to text-sm font-medium text-foreground leading-tight
  font-size: 14px;
  font-weight: 500;
  color: #f4f4f5; // zinc-100 (foreground)
  line-height: 1.2;
}

.componentLibraryItemDescription {
  // Component description styles - equivalent to text-xs text-muted-foreground leading-relaxed line-clamp-2
  font-size: 12px;
  color: #a1a1aa; // zinc-400 (muted-foreground)
  line-height: 1.3;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

// Drag and Drop States
.componentLibraryItem--dragging {
  // Dragging state styles
  opacity: 0.5;
  transform: rotate(2deg);
  box-shadow: var(--semantic-elevation-surface-raised);
}

.componentLibraryItem--drag-over {
  // Drag over state styles
  background-color: var(--semantic-color-action-background-primary-hover);
  border: 2px dashed var(--semantic-color-action-border-primary-focus);
}

// Empty State
.componentLibraryEmpty {
  // Empty state styles
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--semantic-spacing-padding-grid-large);
  text-align: center;
  color: var(--semantic-color-display-foreground-tertiary);
}

.componentLibraryEmptyIcon {
  // Empty state icon
  width: 48px;
  height: 48px;
  margin-bottom: var(--semantic-spacing-gap-grid-small);
  opacity: 0.5;
}

.componentLibraryEmptyText {
  // Empty state text
  font-size: var(--semantic-typography-body-03);
  font-weight: var(--semantic-typography-font-weight-medium);
}

// Loading State
.componentLibraryLoading {
  // Loading state styles
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--semantic-spacing-padding-grid-large);
}

.componentLibraryLoadingSpinner {
  // Loading spinner
  width: 24px;
  height: 24px;
  border: 2px solid var(--semantic-color-display-border-subtle);
  border-top: 2px solid var(--semantic-color-action-background-primary-default);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

// Component Preview
.componentLibraryPreview {
  // Preview container styles
  border: 1px solid var(--componentLibrary-borderColor);
  border-radius: var(--componentLibrary-interactive-borderRadius);
  padding: var(--semantic-spacing-padding-grid-medium);
  background-color: var(--semantic-color-display-background-primary);
  overflow: hidden;
}
