id: DESIGNER-008
title: 'React Component Discovery & Indexing'
risk_tier: 2
mode: feature
change_budget:
  max_files: 25
  max_loc: 1000
blast_radius:
  modules:
    - packages/component-discovery
  data_migration: false
operational_rollback_slo: 15m
threats:
  - 'Component discovery misses valid components'
  - 'Prop extraction fails for complex TypeScript types'
  - 'Component index becomes stale'
  - 'Performance degrades with large component libraries'
  - 'Third-party components not discovered'
scope:
  in:
    - packages/component-discovery/
    - packages/component-discovery/src/
    - packages/component-discovery/tests/
  out:
    - apps/vscode-ext/
    - packages/codegen-react/
invariants:
  - 'Component index stays synchronized with filesystem'
  - 'Prop schemas extracted match runtime prop types'
  - 'Component discovery completes in <5s for 1000 components'
  - 'Index format is versioned and backward compatible'
  - 'Watcher detects component file changes within 100ms'
acceptance:
  - id: A1
    given: 'Project with 50 React components'
    when: 'Component scanner runs'
    then: 'All components discovered and indexed'
    status: in_progress
    notes: '9 out of 11 component scanner tests passing, core functionality working'
  - id: A2
    given: 'Component with complex prop types (unions, generics)'
    when: 'Prop extractor runs'
    then: 'Prop schema accurately reflects TypeScript types'
    status: in_progress
    notes: 'Basic prop extraction working for interface types, inline types and complex types still need work'
  - id: A3
    given: 'Component file is modified'
    when: 'File watcher detects change'
    then: 'Index updates within 100ms'
    status: pending
    notes: 'File watcher not yet implemented'
  - id: A4
    given: 'Third-party component library in node_modules'
    when: 'Discovery runs with allowlist'
    then: 'Third-party components included in index'
    status: pending
    notes: 'Third-party component discovery not yet implemented'
  - id: A5
    given: 'Component index with 1000 components'
    when: 'Query runs'
    then: 'Results returned in <100ms'
    status: pending
    notes: 'Performance optimization not yet implemented'
non_functional:
  a11y: []
  perf:
    component_discovery_ms: 5000
    index_query_ms: 100
    additional:
      - 'Component scanning completes in <5s for 1000 components'
      - 'Index queries return in <100ms'
      - 'Memory usage scales linearly with component count'
  security:
    - 'Component prop extraction validates TypeScript types'
    - 'No code execution during component scanning'
    - 'File system access restricted to project scope'
contracts:
  - type: typescript
    path: packages/component-indexer/src/scanner.ts
  - type: typescript
    path: packages/component-indexer/src/types.ts
observability:
  logs:
    - 'components.discover.complete with component count'
    - 'components.scan.error with file path and error'
    - 'components.index.update with change count'
    - 'tokens.watch.update with changed tokens'
  metrics:
    - 'components_discover_duration_ms histogram'
    - 'components_total gauge'
    - 'components_scan_errors_total counter'
    - 'tokens_references_resolved_total counter'
  traces:
    - 'components.discover.pipeline from files to index'
    - 'components.scan.file for individual file processing'
    - 'components.extract.props for prop schema generation'
migrations:
  - 'Initial release - no migrations required'
  - 'Component index format versioned with backward compatibility'
rollback:
  - 'Can disable component discovery if causing issues'
