---
description: Language-specific docstring formats and checklists
globs:
alwaysApply: false
---

# Docstrings by Language (Reference)

Provide docstrings for public APIs and exported functions, using the language's native format. Include: summary, params, returns, errors, and an example if helpful.

| Language | Doc Type | Include |
|---|---|---|
| C# | XML | `<summary>`, `<param>`, `<returns>`, exceptions |
| C++ | Doxygen | \brief, \param, \return, \exception |
| Go | GoDoc | Full-sentence summary; examples via `ExampleX` |
| Java | Javadoc | One-sentence summary; @param/@return/@throws |
| JS/TS | JSDoc | Description; @param/@returns; @example |
| Kotlin | KDoc | Summary; @param/@return; @throws |
| PHP | PHPDoc | Summary; @param/@return; @throws |
| Python | PEP257 | One-liner; Args/Returns/Raises; example |
| Ruby | RDoc | Description; @param/@return; @raise |
| Rust | rustdoc | `///`; Examples/Panics/Errors sections |
| Swift | DocC | `///`; - Parameters/Returns/Throws; example |

## Examples by Language

### C# (XML comments)

```csharp
/// <summary>
///   Adds two integers.
/// </summary>
/// <param name="a">First integer.</param>
/// <param name="b">Second integer.</param>
/// <returns>The sum of <paramref name="a"/> and <paramref name="b"/>.</returns>
/// <example>
///   <code>
///     var result = calculator.Add(2, 3); // 5
///   </code>
/// </example>
public int Add(int a, int b) => a + b;
```

### JavaScript / TypeScript (JSDoc)

```ts
/**
 * Adds two numbers.
 *
 * @param {number} a - First number.
 * @param {number} b - Second number.
 * @returns {number} Sum of a and b.
 * @example
 *   add(2, 3); // 5
 */
function add(a, b) {
  return a + b;
}
```

### Python (PEP 257 / Google style)

```python
def add(a: int, b: int) -> int:
    """Add two integers.

    Args:
        a (int): First integer.
        b (int): Second integer.

    Returns:
        int: Sum of a and b.

    Raises:
        ValueError: If a or b is negative.

    Example:
        >>> add(2, 3)
        5
    """
    if a < 0 or b < 0:
        raise ValueError("Negative not allowed")
    return a + b
```

## Acceptance
- Public APIs have docstrings in native style.
- Docstrings describe behavior, inputs, outputs, and failure modes.
